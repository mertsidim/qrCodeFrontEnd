import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild, ElementRef, } from '@angular/core';
import { ADSENSE_TOKEN } from './adsense-config';
var AdsenseComponent = /** @class */ (function () {
    function AdsenseComponent(config) {
        this.config = config;
        /** can be manually set if you need all ads on a page to have same id page-xxx */
        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
    }
    AdsenseComponent.prototype.ngOnInit = function () {
        var config = this.config;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.adClient = use(this.adClient, config.adClient);
        this.adSlot = use(this.adSlot, config.adSlot);
        this.adFormat = use(this.adFormat, config.adFormat || 'auto');
        this.display = use(this.display, config.display || 'block');
        this.width = use(this.width, config.width);
        this.height = use(this.height, config.height);
        this.layout = use(this.layout, config.layout);
        this.layoutKey = use(this.layoutKey, config.layoutKey);
        this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
        this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
        this.adtest = use(this.adtest, config.adtest);
        this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
    };
    AdsenseComponent.prototype.ngOnDestroy = function () {
        var iframe = this.ins.nativeElement.querySelector('iframe');
        if (iframe && iframe.contentWindow) {
            iframe.src = 'about:blank';
            iframe.remove();
        }
    };
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     */
    AdsenseComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var res = this.push();
        if (res instanceof TypeError) {
            setTimeout(function () { return _this.push(); }, this.timeOutRetry);
        }
    };
    AdsenseComponent.prototype.push = function () {
        var p = {};
        if (this.pageLevelAds) {
            p.google_ad_client = this.adClient;
            p.enable_page_level_ads = true;
        }
        try {
            var adsbygoogle = window.adsbygoogle;
            adsbygoogle.push(p);
            return true;
        }
        catch (e) {
            return e;
        }
    };
    AdsenseComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [ADSENSE_TOKEN,] }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "adClient", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], AdsenseComponent.prototype, "adSlot", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "adFormat", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], AdsenseComponent.prototype, "adRegion", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "display", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AdsenseComponent.prototype, "width", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AdsenseComponent.prototype, "height", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "layout", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "layoutKey", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AdsenseComponent.prototype, "pageLevelAds", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AdsenseComponent.prototype, "timeOutRetry", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "adtest", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AdsenseComponent.prototype, "fullWidthResponsive", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "className", void 0);
    tslib_1.__decorate([
        ViewChild('ins', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", Object)
    ], AdsenseComponent.prototype, "ins", void 0);
    AdsenseComponent = tslib_1.__decorate([
        Component({
            selector: 'ng2-adsense,ng-adsense',
            template: "\n  <ins #ins class=\"adsbygoogle {{ className }}\"\n    [style.display]=\"display\"\n    [style.width.px]=\"width\"\n    [style.height.px]=\"height\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-adtest]=\"adtest\"\n    [attr.data-layout-key]=\"layoutKey\"\n    [attr.data-full-width-responsive]=\"fullWidthResponsive\">\n  </ins>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__param(0, Inject(ADSENSE_TOKEN)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], AdsenseComponent);
    return AdsenseComponent;
}());
export { AdsenseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRzZW5zZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItYWRzZW5zZS8iLCJzb3VyY2VzIjpbImFkc2Vuc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUdMLFNBQVMsRUFDVCxVQUFVLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGFBQWEsRUFBaUIsTUFBTSxrQkFBa0IsQ0FBQztBQXFCaEU7SUFnQ0UsMEJBQ2lDLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7UUEzQnRELGlGQUFpRjtRQUN4RSxhQUFRLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQTJCaEUsQ0FBQztJQUVMLG1DQUFRLEdBQVI7UUFDRSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLFNBQVMsR0FBRyxDQUFJLE1BQVMsRUFBRSxZQUFlO1lBQ3hDLE9BQU8sTUFBTSxJQUFJLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ2hFLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE9B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bUI7SUFFbEI7UUFBUixLQUFLLEVBQUU7OzBEQUF1QjtJQUV0QjtRQUFSLEtBQUssRUFBRTs7MERBQXNCO0lBRXJCO1FBQVIsS0FBSyxFQUFFOztvREFBZ0I7SUFFZjtRQUFSLEtBQUssRUFBRTs7aUVBQThCO0lBSTdCO1FBQVIsS0FBSyxFQUFFOzt1REFBbUI7SUFDMkI7UUFBckQsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOztpREFBVTtJQTlCcEQsZ0JBQWdCO1FBbkI1QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFFBQVEsRUFBRSxrZkFjVDtZQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7UUFrQ0csbUJBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBOztPQWpDYixnQkFBZ0IsQ0F3RjVCO0lBQUQsdUJBQUM7Q0FBQSxBQXhGRCxJQXdGQztTQXhGWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQURTRU5TRV9UT0tFTiwgQWRzZW5zZUNvbmZpZyB9IGZyb20gJy4vYWRzZW5zZS1jb25maWcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZzItYWRzZW5zZSxuZy1hZHNlbnNlJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGlucyAjaW5zIGNsYXNzPVwiYWRzYnlnb29nbGUge3sgY2xhc3NOYW1lIH19XCJcbiAgICBbc3R5bGUuZGlzcGxheV09XCJkaXNwbGF5XCJcbiAgICBbc3R5bGUud2lkdGgucHhdPVwid2lkdGhcIlxuICAgIFtzdHlsZS5oZWlnaHQucHhdPVwiaGVpZ2h0XCJcbiAgICBbYXR0ci5kYXRhLWFkLWNsaWVudF09XCJhZENsaWVudFwiXG4gICAgW2F0dHIuZGF0YS1hZC1zbG90XT1cImFkU2xvdFwiXG4gICAgW2F0dHIuZGF0YS1hZC1mb3JtYXRdPVwiYWRGb3JtYXRcIlxuICAgIFthdHRyLmRhdGEtYWQtcmVnaW9uXT1cImFkUmVnaW9uXCJcbiAgICBbYXR0ci5kYXRhLWxheW91dF09XCJsYXlvdXRcIlxuICAgIFthdHRyLmRhdGEtYWR0ZXN0XT1cImFkdGVzdFwiXG4gICAgW2F0dHIuZGF0YS1sYXlvdXQta2V5XT1cImxheW91dEtleVwiXG4gICAgW2F0dHIuZGF0YS1mdWxsLXdpZHRoLXJlc3BvbnNpdmVdPVwiZnVsbFdpZHRoUmVzcG9uc2l2ZVwiPlxuICA8L2lucz5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEFkc2Vuc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIC8qKiBhZHNlbnNlIGFjY291bnQgY2EtcHViLVhYWFhYWFhYWFhYWFhYWFggKi9cbiAgQElucHV0KCkgYWRDbGllbnQ6IHN0cmluZztcbiAgLyoqIGFkIHNsb3QvbnVtYmVyICovXG4gIEBJbnB1dCgpIGFkU2xvdDogc3RyaW5nIHwgbnVtYmVyO1xuICBASW5wdXQoKSBhZEZvcm1hdDogc3RyaW5nO1xuICAvKiogY2FuIGJlIG1hbnVhbGx5IHNldCBpZiB5b3UgbmVlZCBhbGwgYWRzIG9uIGEgcGFnZSB0byBoYXZlIHNhbWUgaWQgcGFnZS14eHggKi9cbiAgQElucHV0KCkgYWRSZWdpb24gPSAncGFnZS0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMTtcbiAgLyoqIGlucyBlbGVtZW50IGRpc3BsYXkgc3R5bGUgKi9cbiAgQElucHV0KCkgZGlzcGxheTogc3RyaW5nO1xuICAvKiogaW5zIGVsZW1lbnQgaGVpZ2h0IGluIHB4ICovXG4gIEBJbnB1dCgpIHdpZHRoOiBudW1iZXI7XG4gIC8qKiBpbnMgZWxlbWVudCB3aWR0aCBpbiBweCAqL1xuICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcbiAgLyoqIHVzZWQgZm9yIGluLWZlZWQgYWRzICovXG4gIEBJbnB1dCgpIGxheW91dDogc3RyaW5nO1xuICAvKiogdXNlZCBmb3IgaW4tZmVlZCBhZHMgKi9cbiAgQElucHV0KCkgbGF5b3V0S2V5OiBzdHJpbmc7XG4gIC8qKiBlbmFibGUgcGFnZS1sZXZlbCBhZHMgKi9cbiAgQElucHV0KCkgcGFnZUxldmVsQWRzOiBib29sZWFuO1xuICAvKiogb24gZmlyc3QgbG9hZCBzb21ldGltZXMgYWRzZW5zZSBpcyBub3QgcmVhZHkgKi9cbiAgQElucHV0KCkgdGltZU91dFJldHJ5OiBudW1iZXI7XG4gIC8qKiBzZXRzIHVwIHNvbWUgc29ydCBvZiBnb29nbGUgdGVzdCBhZCAqL1xuICBASW5wdXQoKSBhZHRlc3Q6IHN0cmluZztcbiAgLyogdXNlZCBmb3IgZmxleGlibGUgYWRzICovXG4gIEBJbnB1dCgpIGZ1bGxXaWR0aFJlc3BvbnNpdmU6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBjbGFzc2VzIGFwcGxpZWQgdG8gdGhlIGlucyBlbGVtZW50XG4gICAqL1xuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZztcbiAgQFZpZXdDaGlsZCgnaW5zJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgaW5zOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChBRFNFTlNFX1RPS0VOKSBwcml2YXRlIGNvbmZpZzogQWRzZW5zZUNvbmZpZyxcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICBmdW5jdGlvbiB1c2U8VD4oc291cmNlOiBULCBkZWZhdWx0VmFsdWU6IFQpOiBUIHtcbiAgICAgIHJldHVybiBjb25maWcgJiYgc291cmNlICE9PSB1bmRlZmluZWQgPyBzb3VyY2UgOiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHRoaXMuYWRDbGllbnQgPSB1c2UodGhpcy5hZENsaWVudCwgY29uZmlnLmFkQ2xpZW50KTtcbiAgICB0aGlzLmFkU2xvdCA9IHVzZSh0aGlzLmFkU2xvdCwgY29uZmlnLmFkU2xvdCk7XG4gICAgdGhpcy5hZEZvcm1hdCA9IHVzZSh0aGlzLmFkRm9ybWF0LCBjb25maWcuYWRGb3JtYXQgfHwgJ2F1dG8nKTtcbiAgICB0aGlzLmRpc3BsYXkgPSB1c2UodGhpcy5kaXNwbGF5LCBjb25maWcuZGlzcGxheSB8fCAnYmxvY2snKTtcbiAgICB0aGlzLndpZHRoID0gdXNlKHRoaXMud2lkdGgsIGNvbmZpZy53aWR0aCk7XG4gICAgdGhpcy5oZWlnaHQgPSB1c2UodGhpcy5oZWlnaHQsIGNvbmZpZy5oZWlnaHQpO1xuICAgIHRoaXMubGF5b3V0ID0gdXNlKHRoaXMubGF5b3V0LCBjb25maWcubGF5b3V0KTtcbiAgICB0aGlzLmxheW91dEtleSA9IHVzZSh0aGlzLmxheW91dEtleSwgY29uZmlnLmxheW91dEtleSk7XG4gICAgdGhpcy5wYWdlTGV2ZWxBZHMgPSB1c2UodGhpcy5wYWdlTGV2ZWxBZHMsIGNvbmZpZy5wYWdlTGV2ZWxBZHMpO1xuICAgIHRoaXMudGltZU91dFJldHJ5ID0gdXNlKHRoaXMudGltZU91dFJldHJ5LCBjb25maWcudGltZU91dFJldHJ5IHx8IDIwMCk7XG4gICAgdGhpcy5hZHRlc3QgPSB1c2UodGhpcy5hZHRlc3QsIGNvbmZpZy5hZHRlc3QpO1xuICAgIHRoaXMuZnVsbFdpZHRoUmVzcG9uc2l2ZSA9IHVzZSh0aGlzLmZ1bGxXaWR0aFJlc3BvbnNpdmUsIGNvbmZpZy5mdWxsV2lkdGhSZXNwb25zaXZlKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBjb25zdCBpZnJhbWUgPSB0aGlzLmlucy5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xuICAgIGlmIChpZnJhbWUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgaWZyYW1lLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBhdHRlbXB0cyB0byBwdXNoIHRoZSBhZCB0d2ljZS4gVXN1YWxseSBpZiBvbmUgZG9lc24ndCB3b3JrIHRoZSBvdGhlclxuICAgKiB3aWxsIGRlcGVkaW5nIG9uIGlmIHRoZSBicm93c2VyIGhhcyB0aGUgYWRzZW5zZSBjb2RlIGNhY2hlZCBhbmRcbiAgICogaWYgaXRzIHRoZSBmaXJzdCBwYWdlIHRvIGJlIGxvYWRlZFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IHJlcyA9IHRoaXMucHVzaCgpO1xuICAgIGlmIChyZXMgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wdXNoKCksIHRoaXMudGltZU91dFJldHJ5KTtcbiAgICB9XG4gIH1cblxuICBwdXNoKCkge1xuICAgIGNvbnN0IHA6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLnBhZ2VMZXZlbEFkcykge1xuICAgICAgcC5nb29nbGVfYWRfY2xpZW50ID0gdGhpcy5hZENsaWVudDtcbiAgICAgIHAuZW5hYmxlX3BhZ2VfbGV2ZWxfYWRzID0gdHJ1ZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFkc2J5Z29vZ2xlID0gKHdpbmRvdyBhcyBhbnkpLmFkc2J5Z29vZ2xlO1xuICAgICAgYWRzYnlnb29nbGUucHVzaChwKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgfVxufVxuXG4iXX0=